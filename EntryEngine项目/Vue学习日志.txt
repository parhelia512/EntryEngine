1. 下载nodejs，主要是用它的包管理命令，方便安装其它应用。官网http://nodejs.cn
2. 下载完安装好nodejs后，后面的操作都在命令行进行。首先调用node -v查看nodejs的版本号确保nodejs已经正确安装
3. 安装淘宝镜像npm install -g cnpm --registry=https://registry.npm.taobao.org
4. 安装脚手架cnpm install --global vue-cli
5. 建立项目vue init webpack project-name
6. 配置直到vue-router一直yes，之后一直no
7. 测试运行项目cd project-name，npm run dev，之后在浏览器输入localhost:8080就可以看到vue默认页了

插件：
sass,sass-loader
作用说明：用于写样式时可以层级嵌套
例如：
#app {}
#app p {}
使用说明：
1. 需要指定style的lang为scss，例如<style lang="scss">
2. 写样式可以层级嵌套了
#app {
  p {}
}

element-ui(vue2.0),element-plus(vue3.0)
作用说明：编写前端项目用的UI框架，官网https://element-plus.gitee.io/zh-CN/component/button.html
使用说明：
import ElementPlus from 'element-plus'
import 'element-plus/dist/index.css'
vue.use(ElementPlus)

vant
作用说明：编写前端项目用的UI框架，官网https://youzan.github.io/vant/#/zh-CN/quickstart
使用说明：
1. main.js引入组件和样式，vue使用
import Vant from 'vant';
import 'vant/lib/index.css';
vue.use(Vant)

配置文件vue.config.js
const { defineConfig } = require('@vue/cli-service')
module.exports = defineConfig({
    transpileDependencies: true,
	// lint要求组件名必须是2个单词以上的名字例如HomePage，此配置可取消限制例如Home
	lintOnSave: false,
	// 发布时不生成.map文件
	productionSourceMap: false,
	// 发布后可以将网站配置到IIS的一个文件夹里，方便一个IIS网站跑多个项目
	publicPath: "./",

    css: {
        loaderOptions: {
			// postcss-pxtorem：css中使用的尺寸单位为px，编译后会自动转换成rem（需要下载postcss-pxtorem插件，注意不支持行内样式）
            postcss: {
                postcssOptions: {
                    plugins: [
                        require('postcss-pxtorem')({
                            rootValue: 32,
                            propList: ["*"],
                        })
                    ]
                }
            },

			// 全局加载scss
			sass: {
				additionalData: `@import "@/assets/scss/style.scss";`
			},
        }
    },
})
// 以下写明项目开发时的环境版本，以便其他人npm install时正确搭建开发环境
// npm -v 8.0.0
// node -v v16.13.0
// vue -V @vue-cli 5.0.4

vue-router
作用说明：单页应用需要用到的页面切换组件

矢量图标https://www.iconfont.cn/
1. 项目引入：在index.html引入css
<link rel="stylesheet" type="text/css" href="//at.alicdn.com/t/font_*****.css">
使用icon：<i class="iconfont 图标名" />，css修改颜色color，修改尺寸font-size
2. 单个图标引入：在iconfont网站找到图标，点击下载，复制SVG代码，粘贴到代码相应位置即可
使用icon：<svg t="1656641599715" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1566" width="200" height="200"><path d="M395.306667 577.706667a34.346667 34.346667 0 0 0-68.266667-3.2 193.92 193.92 0 0 0 223.573333 234.666666h5.12a34.346667 34.346667 0 0 0-6.613333-66.986666 299.946667 299.946667 0 0 1-66.346667-1.92 125.013333 125.013333 0 0 1-87.68-153.6z" p-id="1567"></path><path d="M512 168.96c68.48 67.413333 240 256 240 457.813333a240.853333 240.853333 0 0 1-481.706667 0c0-195.84 165.333333-382.293333 241.706667-457.813333M512 85.333333a39.04 39.04 0 0 0-21.333333 6.613334l-6.4 5.546666C418.133333 159.573333 200.106667 381.013333 200.106667 626.773333a311.893333 311.893333 0 0 0 623.786666 0c0-248.746667-216.746667-468.266667-282.88-529.493333l-1.92-1.706667A38.613333 38.613333 0 0 0 512 85.333333z" fill="#ff0000" p-id="1568"></path></svg>
修改颜色path标签的fill属性，css修改大小width或height

样式经验：
作用说明：页面尺寸自适应
使用说明：
1. 在任意初始化位置设置以下脚本
// 设置 rem 函数
function FixWindowRem() {
  // 文字基准大小（单位px）
  const BaseFontSize = 32
  // 应用设计基准宽高
  const Width = 750
  const Height = 1334
  var scale;
  // 屏幕宽高
  var width = document.documentElement.clientWidth || document.body.clientWidth;
  var height = document.documentElement.clientHeight || document.body.clientHeight;
  if ((width / height) < (Width / Height)) {
    // 竖屏
    scale = width / Width
  } else {
    // 横屏
    scale = height / Height
  }
  // 设置页面根节点字体大小
  document.getElementsByTagName('html').item(0).style.fontSize = BaseFontSize * scale + 'px'
}
// 第一次初始化设置
FixWindowRem()
// 改变窗口大小时重新设置
window.onresize = FixWindowRem
2. 以后样式需用到单位时，必须使用rem单位（结合postcss-pxtorem可以使用px单位）

作用说明：js获取浏览器地址参数
使用说明：
1. 一个公共函数
var __param;
function param(key) {
	if (!__param) {
		__param = {};
		if (location.href.search && location.href.search.length) {
			var array = location.search.substring(1).split("&");
			for (var item of array){
				var split = item.split("=");
				__param[split[0]] = decodeURIComponent(split[1]);
			}
		}
	}
	return __param[key];
}
2. 获取参数：param("要获取的参数名")

作用说明：在使用router的情况下，希望将url增加特定的参数(例如用户ID以便分享链接时带上分享人)
使用说明：
1. 在路由守护事件上加上参数后再跳转
// url加上参数，第一个参数加'?'，以后的参数加'&'
const query = (path: string, key: string, value: any) => {
  if (path.includes('?'))
    path += '&'
  else
    path += '?'
  path += key + "=" + value
  return path;
}
// 路由守护
router.beforeEach((to, from, next) => {
  let path = to.fullPath
  if (store.getters.getUser && store.getters.getUser.ID) {
	// 没有该参数才加该参数，防止加完参数二次跳转时死循环
    if (!to.query.inviteID)
      path = query(path, "inviteID", store.getters.getUser.ID)
  }
  if (exclude.includes(<string>to.name)) {
    // 已经登录了只能进入首页，不能进入登录页
    if (store.getters.getUser.ID) {
      next('/')
      return;
    }
  }
  // 二次进入后没加任何参数，直接next
  if (path == to.fullPath)
    next()
  // 首次进入加完参数后跳转加了参数后的url
  else
    next(path)
})

作用说明：进入某个需要登录的页面时尚未登录，跳转登录页登录后应该跳回原本要去的页面
使用说明：
1. 需要登录一般是指某个接口发过去后端返回指定错误码要求登录，统一发接口的代码例如下
const errmsg = function (res:any) {
	// 100代表指定的需要登录的错误码
    if (res.errCode === 100) {
		// 防止多个接口都返回需要登录导致重复跳转
		if (router.currentRoute.value.name != 'Login') {
			console.log("接口登出")
			// 修改用户登出状态
			store.default.commit("logout")
			// 跳转登录页
			router.push({ 
				name: 'Login',
				// 这里加上现在所在的页面作为参数，后面登录后方便跳回
				query: {
					redirectUrl: router.currentRoute.value.fullPath
				}
			})
			Toast.fail({
				message: "请先登录",
				duration: 2000
			})
		}
    } else {
        Toast.fail({
            message:res.errMsg,
            duration:5000
        })
    }
}
2. 登录页登录成功后的回调，加上跳转页面参数的判断即可，如下
  iS.LoginBySMSCode(phone.value, code.value, route.query.inviteID).then((res) => {
    code.value = "";
    Store.commit("login", res);
    Toast.success("登陆成功");
	// 判断地址上有跳转参数就跳转到指定页面
    if (route.query.redirectUrl)
      router.push(route.query.redirectUrl)
	// 跳转到首页
    else
      router.push('/');
  });

作用说明：去掉body和html之间的空白间隔
作用说明：去掉各种文字标签上下一部分的空白像素，有空白像素文字内容会和蓝湖等设计工具间隔像素不一致
使用说明：在任意css位置加上 * { margin: 0px; line-height: 1; }