1. 下载nodejs，主要是用它的包管理命令，方便安装其它应用。官网http://nodejs.cn
2. 下载完安装好nodejs后，后面的操作都在命令行进行。首先调用node -v查看nodejs的版本号确保nodejs已经正确安装
3. 安装淘宝镜像npm install -g cnpm --registry=https://registry.npm.taobao.org
4. 安装脚手架cnpm install --global vue-cli
5. 建立项目vue init webpack project-name
6. 配置直到vue-router一直yes，之后一直no
7. 测试运行项目cd project-name，npm run dev，之后在浏览器输入localhost:8080就可以看到vue默认页了

插件：
sass,sass-loader
作用说明：用于写样式时可以层级嵌套
例如：
#app {}
#app p {}
使用说明：
1. 需要指定style的lang为scss，例如<style lang="scss">
2. 写样式可以层级嵌套了
#app {
  p {}
}

element-ui(vue2.0),element-plus(vue3.0)
作用说明：编写前端项目用的UI框架，官网https://element-plus.gitee.io/zh-CN/component/button.html
使用说明：
import ElementPlus from 'element-plus'
import 'element-plus/dist/index.css'
vue.use(ElementPlus)

vant
作用说明：编写前端项目用的UI框架，官网https://youzan.github.io/vant/#/zh-CN/quickstart
使用说明：
1. main.js引入组件和样式，vue使用
import Vant from 'vant';
import 'vant/lib/index.css';
vue.use(Vant)

配置文件vue.config.js
const { defineConfig } = require('@vue/cli-service')
module.exports = defineConfig({
    transpileDependencies: true,
	// lint要求组件名必须是2个单词以上的名字例如HomePage，此配置可取消限制例如Home
	lintOnSave: false,
	// 发布时不生成.map文件
	productionSourceMap: false,
	// 发布后可以将网站配置到IIS的一个文件夹里，方便一个IIS网站跑多个项目
	publicPath: "./",

    css: {
        loaderOptions: {
			// postcss-pxtorem：css中使用的尺寸单位为px，编译后会自动转换成rem（需要下载postcss-pxtorem插件，注意不支持行内样式）
            postcss: {
                postcssOptions: {
                    plugins: [
                        require('postcss-pxtorem')({
                            rootValue: 32,
                            propList: ["*"],
                        })
                    ]
                }
            },

			// 全局加载scss
			sass: {
				additionalData: `@import "@/assets/scss/style.scss";`
			},
        }
    },
})
// 以下写明项目开发时的环境版本，以便其他人npm install时正确搭建开发环境
// npm -v 8.0.0
// node -v v16.13.0
// vue -V @vue-cli 5.0.4

vue-router
作用说明：单页应用需要用到的页面切换组件

矢量图标https://www.iconfont.cn/
1. 项目引入：在index.html引入css
<link rel="stylesheet" type="text/css" href="//at.alicdn.com/t/font_*****.css">
使用icon：<i class="iconfont 图标名" />，css修改颜色color，修改尺寸font-size
2. 单个图标引入：在iconfont网站找到图标，点击下载，复制SVG代码，粘贴到代码相应位置即可
使用icon：<svg t="1656641599715" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1566" width="200" height="200"><path d="M395.306667 577.706667a34.346667 34.346667 0 0 0-68.266667-3.2 193.92 193.92 0 0 0 223.573333 234.666666h5.12a34.346667 34.346667 0 0 0-6.613333-66.986666 299.946667 299.946667 0 0 1-66.346667-1.92 125.013333 125.013333 0 0 1-87.68-153.6z" p-id="1567"></path><path d="M512 168.96c68.48 67.413333 240 256 240 457.813333a240.853333 240.853333 0 0 1-481.706667 0c0-195.84 165.333333-382.293333 241.706667-457.813333M512 85.333333a39.04 39.04 0 0 0-21.333333 6.613334l-6.4 5.546666C418.133333 159.573333 200.106667 381.013333 200.106667 626.773333a311.893333 311.893333 0 0 0 623.786666 0c0-248.746667-216.746667-468.266667-282.88-529.493333l-1.92-1.706667A38.613333 38.613333 0 0 0 512 85.333333z" fill="#ff0000" p-id="1568"></path></svg>
修改颜色path标签的fill属性，css修改大小width或height

样式经验：
作用说明：页面尺寸自适应
使用说明：
1. 在任意初始化位置设置以下脚本
// 设置 rem 函数
function FixWindowRem() {
  // 文字基准大小（单位px）
  const BaseFontSize = 32
  // 应用设计基准宽高
  const Width = 750
  const Height = 1334
  var scale;
  // 屏幕宽高
  var width = document.documentElement.clientWidth || document.body.clientWidth;
  var height = document.documentElement.clientHeight || document.body.clientHeight;
  if ((width / height) < (Width / Height)) {
    // 竖屏
    scale = width / Width
  } else {
    // 横屏
    scale = height / Height
  }
  // 设置页面根节点字体大小
  document.getElementsByTagName('html').item(0).style.fontSize = BaseFontSize * scale + 'px'
}
// 第一次初始化设置
FixWindowRem()
// 改变窗口大小时重新设置
window.onresize = FixWindowRem
2. 以后样式需用到单位时，必须使用rem单位（结合postcss-pxtorem可以使用px单位）

作用说明：js获取浏览器地址参数
使用说明：
1. 一个公共函数
var __param;
function param(key) {
	if (!__param) {
		__param = [];
		if (location.href.search && location.href.search.length) {
			var array = location.search.substring(1).split("&");
			for (var item of array){
				var split = item.split("=");
				__param[split[0]] = decodeURIComponent(split[1]);
			}
		}
	}
	return __param[key];
}
第二种用法，获取全部的参数：
function param() {
	let __param = [];
	if (location.href.search && location.href.search.length) {
		var array = location.search.substring(1).split("&");
		for (var item of array){
			var split = item.split("=");
			__param[split[0]] = decodeURIComponent(split[1]);
		}
	}
	return __param;
}
2. 获取参数：param("要获取的参数名"); 第二种用法：param()["要获取的参数名"]

作用说明：在使用router的情况下，希望将url增加特定的参数(例如用户ID以便分享链接时带上分享人)
使用说明：
1. 在路由守护事件上加上参数后再跳转
// url加上参数，第一个参数加'?'，以后的参数加'&'
const query = (path: string, key: string, value: any) => {
  if (path.includes('?'))
    path += '&'
  else
    path += '?'
  path += key + "=" + value
  return path;
}
// 路由守护
router.beforeEach((to, from, next) => {
  let path = to.fullPath
  if (store.getters.getUser && store.getters.getUser.ID) {
	// 没有该参数才加该参数，防止加完参数二次跳转时死循环
    if (!to.query.inviteID)
      path = query(path, "inviteID", store.getters.getUser.ID)
  }
  if (exclude.includes(<string>to.name)) {
    // 已经登录了只能进入首页，不能进入登录页
    if (store.getters.getUser.ID) {
      next('/')
      return;
    }
  }
  // 二次进入后没加任何参数，直接next
  if (path == to.fullPath)
    next()
  // 首次进入加完参数后跳转加了参数后的url
  else
    next(path)
})

作用说明：进入某个需要登录的页面时尚未登录，跳转登录页登录后应该跳回原本要去的页面
使用说明：
1. 需要登录一般是指某个接口发过去后端返回指定错误码要求登录，统一发接口的代码例如下
const errmsg = function (res:any) {
	// 100代表指定的需要登录的错误码
    if (res.errCode === 100) {
		// 防止多个接口都返回需要登录导致重复跳转
		if (router.currentRoute.value.name != 'Login') {
			console.log("接口登出")
			// 修改用户登出状态
			store.default.commit("logout")
			// 跳转登录页
			router.push({ 
				name: 'Login',
				// 这里加上现在所在的页面作为参数，后面登录后方便跳回
				query: {
					redirectUrl: router.currentRoute.value.fullPath
				}
			})
			Toast.fail({
				message: "请先登录",
				duration: 2000
			})
		}
    } else {
        Toast.fail({
            message:res.errMsg,
            duration:5000
        })
    }
}
2. 登录页登录成功后的回调，加上跳转页面参数的判断即可，如下
  iS.LoginBySMSCode(phone.value, code.value, route.query.inviteID).then((res) => {
    code.value = "";
    Store.commit("login", res);
    Toast.success("登陆成功");
	// 判断地址上有跳转参数就跳转到指定页面
    if (route.query.redirectUrl)
      router.push(route.query.redirectUrl)
	// 跳转到首页
    else
      router.push('/');
  });

作用说明：JSSDK的微信登录
使用说明：
1. 打开微信授权页获取code（此时原本页面其实并未刷新，仅是弹窗授权而已）
  mounted() {
    let ua = navigator.userAgent.toLowerCase();
    if (ua.match(/micromessenger/i) == "micromessenger") {
      // 微信浏览器则拉起微信登录
      let appid = "wx783c68aea3a66450";
      // 若有code则是授权后跳回本页面，否则就是首次打开授权弹窗
      let code = this.$route.query.code;
      if (code) {
        // todo: 将code发给服务端以登录
      } else {
        // 征求用户授权
        let scope = "snsapi_userinfo"
        let href = "https://open.weixin.qq.com/connect/oauth2/authorize?"
          + "appid=" + appid
		  // 同意授权后，将跳转到指定页面，本例是跳转回本页
          + "&redirect_uri=" + encodeURIComponent(location.href)
          + "&response_type=code"
          + "&scope=" + scope
          + "#wechat_redirect"
		// 打开授权弹窗，若取消任然会停留在本页
        location.href = href;
      }
    } else {
	  // todo: 不是微信浏览器
	}
  },
2. 获取code后，将code发给服务端以登录

作用说明：JSSDK的微信支付
1. 在main.js就可以向vue注入支付结束全局方法
vue.config.globalProperties.$pay = (res) => {
    const onBridgeReady = function() {
        WeixinJSBridge.invoke(
            'getBrandWCPayRequest', {
              "appId":res.appId,
              "timeStamp":res.timeStamp,
              "nonceStr":res.nonceStr,
              "package":res.package,     
              "signType":res.signType,
              "paySign":res.paySign //微信签名 
            },
            function(res2) {
                // todo: 向后端主动查询订单支付状态，然后跳转支付完成页
            }
        ); 
    }
    if (typeof WeixinJSBridge == "undefined"){
        if (document.addEventListener) {
            document.addEventListener('WeixinJSBridgeReady', onBridgeReady, false);
        } else if (document.attachEvent) {
            document.attachEvent('WeixinJSBridgeReady', onBridgeReady); 
            document.attachEvent('onWeixinJSBridgeReady', onBridgeReady);
        }
    }else{
        onBridgeReady();
    }
}
2. 业务服务端下单接口回调时，调用全局$pay方法即可，例如
下单接口().then((res) => this.$pay(res));

作用说明：JSSDK其它接口
1. 向后端发送当前url，获取JSSDK准备必要的参数，对jsApiList设置要调用的微信接口
所有接口文档，查看https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html
  mounted() {
    let _this = this;
	// 从后端接口获取准备参数
	// url：官网上文档是需要encodeURI，去掉#等各种，实际调用就是当前地址即可
    WXJSSDK(location.href).then(config => {
      config.jsApiList = ["scanQRCode"] // 必填，需要使用的 JS 接口列表
	  // 调试时打开debug，会alert一些调用行数的步骤
      // config.debug = true;
      wx.config(config);
      wx.ready(function(){
        // config信息验证后会执行 ready 方法，所有接口调用都必须在 config 接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在 ready 函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在 ready 函数中。
        _this.ready = true;
		// todo: 具体的JSSDK接口
      });
      wx.error(function(res){
        // config信息验证失败会执行 error 函数，如签名过期导致验证失败，具体错误信息可以打开 config 的debug模式查看，也可以在返回的 res 参数中查看，对于 SPA 可以在这里更新签名。
        _this.ready = false;
      });
    })
  },
2. 调用JSSDK接口，以扫一扫为例，其它接口参考第一步的接口文档
wx.scanQRCode({
	needResult: 1, // 默认为0，扫描结果由微信处理，1则直接返回扫描结果，
	scanType: ["qrCode","barCode"], // 可以指定扫二维码还是一维码，默认二者都有
	success: function (res) {
		// todo: 扫描二维码的结果res.resultStr;
	}
});

作用说明：去掉body和html之间的空白间隔
作用说明：去掉各种文字标签上下一部分的空白像素，有空白像素文字内容会和蓝湖等设计工具间隔像素不一致
使用说明：在任意css位置加上 * { margin: 0px; line-height: 1; }

作用说明：vue路由hash模式会占用'#'，导致html锚点不可用，以下方法一样可以滚动到id的位置
使用说明：document.getElementById("id").scrollIntoView();

作用说明：普通html网页刷新后，滚动条会滚动到上次滚动的位置，在加上#锚点的情况下，希望到达锚点而不是滚动条上次的位置
使用说明：if (history.scrollRestoration) { history.scrollRestoration = 'manual'; }

网页在线编辑：https://jsrun.net/new
有https，可以编写执行js，手机调试Notifycation等时比较方便

作用说明：有时需要DOM撑满屏幕，100vh在QQ浏览器底部有工具栏时会出现滚动条，window.innerHeight将不包含工具栏
使用说明：
1. 以下代码将为body增加 --height CSS变量等于屏幕可视区域高度
const resize = () => document.body.style.setProperty("--height", window.innerHeight + "px");
resize();
window.onresize = resize;
2. CSS使用如下
.class { height: var(--height) }

作用说明：VUE父组件定义的scoped的scss穿透给子组件使用
使用说明：
1. 父组件声明样式：.parent .child {}
2. 生成样式为.parent .child[data-v-xxxx] {}，此时需要子组件包含[data-v-xxxx]
3. 父组件声明样式加上::v-deep：::v-deep .parent .child {}
4. 生成样式为.parent[data-v-xxxx] .child {}，此时只需要父组件包含[data-v-xxxx]即可

VUE插件开发：https://cli.vuejs.org/zh/guide/build-targets.html#web-components-组件
1. 正常创建vue项目
2. 修改package.json -> "scripts" -> "build" 为 vue-cli-service build --target lib --name EntryEngineUI src/ee/ui/ee-ui.js
--target: lib代表输出插件库
--name: 默认为vue项目名，尽量不要使用带'-'的名字，引入导出的js模块，浏览器可以通过window.EntryEngineUI可以看到导出的模块
src/ee/ui/ee-ui.js是插件入口，应该引入项目需要的插件，导出给使用者使用的对象
3. 执行npm run build后导出了模块到dist文件夹中
4. 只需要css和umd.min.js就行
5. 可以直接html引用css和umd.min.js，或者发布到npm插件进行引用