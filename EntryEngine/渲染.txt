参照Direct3D 11 Graphics
https://msdn.microsoft.com/en-us/library/ff476882(v=vs.85).aspx

颜色插值参照，同样适用于uv插值
http://www.cnblogs.com/wangchengfeng/p/3453194.html
P.x = (1 - u - v) * P1.x + u * P2.x + v * P3.x
P.y = (1 - u - v) * P1.y + u * P2.y + v * P3.y

效率
1. 空循环1000w次约20ms, 1280*720=921600, 960*540=518400
一帧绘制的元素大概为3屏的像素点，则空循环时间为 6ms | 3ms
加上实际计算绘制所需的时间，大概在 18ms | 9ms
800 * 600 = 360000 = 0.72ms(空循环) * 3(屏幕) * 3(绘制) = 6.48ms

此CPU渲染为D3D11渲染的简化版，渲染步骤为
1. Vertex Shader 修改顶点数据，传入顶点，传出顶点
(Gemotry Shader 可以产生新顶点)
2. Rasterizer 光栅化，传入顶点，确定要渲染的像素及其颜色
3. Pixel Shader 修改光栅化确定下来的所有像素颜色
4. 将像素放入Buffer
5. 将Buffer转入图片
6. 使用依赖引擎的GPU渲染将最终图片渲染到屏幕

绘制顺序
1. 默认固定参数: GraphicsSize, ScreenSize, Viewport

2. Begin: 栈形式添加Scissor, Transform

3. BeginShader: List形式添加Shader

4. Draw: 队列形式添加Sprite

5. EndShader: List移除结束的Shader

6. End: 栈移除Scissor, Transform
开始绘制
Sprite
-> VertexPositionColorTexture[4]
-> Vertex Shader
-> Transform
-> Rasterizer
-> Scissor
-> Pixel Shader
-> 层叠加效果（可融入到PixelShader）
-> Buffer

7. Render: 将Buffer经过绘图API渲染到屏幕上

