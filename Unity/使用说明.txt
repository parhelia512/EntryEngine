Unity注意事项
1. 不能使用unsafe
2. WWW的同步加载在Web将死循环
3. 若序列化出现问题，一定是文件写入权限不明不白用不了了，删掉应用重装即可解决
4. 导出Android时，Development Build或者Write Access设置External(SDCard)可以在Android/data/com.xxx.xxx/files/找到写入的存档
   否则会在data/data/com.xxx.xxx/files/里面
5. Unity导出的IOS项目，仅被反射调用的代码将被优化掉，主要反映在数据表生成类型的构造函数和带翻译的Set属性
6. Unity导出的IOS项目，GameObject.FindWithTag用不了，请改用GameObject.Find

Unity项目架构

1. 将EntryEngine, Unity, 游戏程序用到的其它dll加壳，生成.bytes文件
2. 将加壳后的程序放入Unity的Resources目录
3. 新建Unity脚本写以下代码加载解析dll启动游戏
P.S. 当客户端程序需要引用其它Dll时，应将客户端，引用的Dll和运行时环境共同打包成UnityRuntime

using System;
using System.Collections;
using System.Linq;
using System.Reflection;
using UnityEngine;

public class Main : MonoBehaviour
{
    public string GameDll;
    public string GameScene;

    // Use this for initialization
    void Start()
    {
        try
        {
            // 读取dll二进制流，或许还能通过可写文件夹动态加载
            var load = Resources.Load("UnityRuntime") as TextAsset;

            // 加载EntryEngine
            Assembly assembly = AppDomain.CurrentDomain.Load(load.bytes, null);

            // 调用dll自解析
            Type type = assembly.GetType("Program");
            MethodInfo method = type.GetMethod("Main", BindingFlags.Public | BindingFlags.Static);
            method.Invoke(null, new object[1] { null });
            Debug.Log("Load 成功");

            // 若加载EntryEngine时没加载游戏dll，在此单独加载游戏dll
            if (!string.IsNullOrEmpty(GameDll))
            {
                load = Resources.Load(GameDll) as TextAsset;
                assembly = AppDomain.CurrentDomain.Load(load.bytes, null);
            }
        }
        catch (Exception ex)
        {
            Debug.Log(string.Format("加载解析dll异常:{0}", ex.Message));
        }

        // 初始化游戏开始过程
        StartCoroutine_Auto(StartCoroutine());
    }

    IEnumerator StartCoroutine()
    {
        // 创建Unity入口
        Assembly unity = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == "Unity");
        Type gateType = unity.GetType("EntryEngine.Unity.UnityGate");
        var gate = gameObject.AddComponent(gateType);

        // 等待帧结束，让入口Start调用完毕
        yield return new WaitForEndOfFrame();

        try
        {
            // 加载游戏入口场景
            Assembly client = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == GameDll);
            // 使用入口展示场景实例 entry.ShowMainScene<T>();
            PropertyInfo entry = gateType.GetProperty("Entry");
            entry.PropertyType.GetMethod("ShowMainScene", Type.EmptyTypes).
                MakeGenericMethod(client.GetType(GameScene)).
                Invoke(entry.GetValue(gate, new object[0]),
                new object[] { });
        }
        catch (Exception ex)
        {
            Debug.Log(ex.Message + "\r\n" + ex.StackTrace);
        }

        // 移除加载程序
        DestroyImmediate(this);
    }
}


Unity发布环境2，使用EntryBuilder.PublishToUnity将Xna程序发布到Unity可以使用以下方式在Unity运行程序
using System;
using System.Collections;
using System.Linq;
using System.Reflection;
using UnityEngine;

public class Main : MonoBehaviour
{
    void LoadResources(string resource, Action<TextAsset> load)
    {
        var asset = Resources.Load<TextAsset>(resource);
        try
        {
            load(asset);
        }
        catch (Exception ex)
        {
            Debug.Log(string.Format("Load resources[{0}] error! ex={1}", resource, ex.Message));
        }
        finally
        {
            Resources.UnloadAsset(asset);
        }
    }
    // Use this for initialization
    void Start()
    {
        try
        {
            // 读取dll二进制流，或许还能通过可写文件夹动态加载
            LoadResources("UnityRuntime",
                asset =>
                {
                    // 加载EntryEngine
                    Assembly assembly = AppDomain.CurrentDomain.Load(asset.bytes, null);
                    // 调用dll自解析
                    Type type = assembly.GetType("Program");
                    MethodInfo method = type.GetMethod("Main", BindingFlags.Public | BindingFlags.Static);
                    method.Invoke(null, new object[1] { null });
                    Debug.Log("Load 成功");
                });

            LoadResources("__filelist.txt",
                asset =>
                {
                    string[] list = asset.text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
                    for (int i = 0; i < list.Length; i++)
                    {
                        LoadResources(list[i], dll => AppDomain.CurrentDomain.Load(dll.bytes, null));
                    }
                });
        }
        catch (Exception ex)
        {
            Debug.Log(string.Format("加载解析dll异常:{0}", ex.Message));
        }

        // 初始化游戏开始过程
        StartCoroutine_Auto(StartCoroutine());
    }

    IEnumerator StartCoroutine()
    {
        // 创建Unity入口
        Assembly unity = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == "Unity");
        Type gateType = unity.GetType("EntryEngine.Unity.UnityGate");
        var gate = gameObject.AddComponent(gateType);

        // 等待帧结束，让入口Start调用完毕
        yield return new WaitForEndOfFrame();

        try
        {
            // 加载游戏入口场景
            Assembly client = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == "Client");
            // 使用入口展示场景实例 entry.ShowMainScene<T>();
            PropertyInfo entry = gateType.GetProperty("Entry");
            entry.PropertyType.GetMethod("ShowMainScene", Type.EmptyTypes).
                MakeGenericMethod(client.GetType("EntryScene")).
                Invoke(entry.GetValue(gate, new object[0]),
                new object[] { });
        }
        catch (Exception ex)
        {
            Debug.Log(ex.Message + "\r\n" + ex.StackTrace);
        }

        // 移除加载程序
        DestroyImmediate(this);
    }
}


Android环境搭建
1. 下载安装JDK http://www.oracle.com/technetwork/java/javase/downloads/index.html
2. 下载安装Eclipse http://www.eclipse.org/downloads/ 安装时选择Eclipse IDE for Java EE Developers
3. 打开Eclipse安装ADT Help -> Install New Software -> Add -> Archive -> 选择下载好的本地zip（有VPN时可以使用网址https://dl-ssl.google.com/android/eclipse/）
4. 指定SDK路径

Android环境搭建2
1. 下载安装JDK http://www.oracle.com/technetwork/java/javase/downloads/index.html
2. 下载ADT，解压后自带Eclipse，SDK和SDK Manager
3. 指定SDK路径

较为稳定的版本JDK8
https://unity3d.com/cn/get-unity/download?thank-you=update&download_nid=47202&os=Win

Android广告植入

1. 新建java项目，Package Name要与最终发布的名字相同，在AndroidManifest.xml可修改
Theme: None -> Create custom launcher icon: False -> Create Activity: Empty Activity

2. 将广告.jar和Unity的classes.jar拖入libs目录下
3. 使用java编写以下Activity
package ...;

import ...;

public class MainActivity extends UnityPlayerActivity
{
	private class Banner
	{
		public String PosId;
		public RelativeLayout Container;
		// 使用相应的广告平台AD类型
		public BannerView AD;
	}

	private Activity mContext = null;
	private Banner[] banners = new Banner[2];
	private int bannerCount = 0;
	
	public String APP_ID = "";
	public String APP_KEY = "";

	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		// 这里不清除会一运行就退出
		//setContentView(R.layout.activity_main);
		
		mContext = this;
	}

	public boolean GetBannerState(String posId)
    {
        for (int i = 0; i < bannerCount; i++)
        {
            if (banners[i].PosId == posId)
            {
                return true;
            }
        }
        return false;
    }
	public void ShowBanner(final String posId)
	{
		Banner banner = null;
		for (int i = 0; i < bannerCount; i++)
		{
			if (banners[i] != null && banners[i].PosId == posId)
			{
				banner = banners[i];
				break;
			}
		}
		
		if (banner != null)
		{
			// 刷新广告
			banner.AD.loadAD();
		}
		else
		{
			((Activity) mContext).runOnUiThread(new Runnable()
			{
				@Override
				public void run()
				{
					final RelativeLayout bannerContainer = new RelativeLayout(mContext);
					
					Banner banner = new Banner();
					if (bannerCount == banners.length)
					{
						// 最低需要API 9
						banners = Arrays.copyOf(banners, bannerCount * 2);
						banners[bannerCount] = banner;
						bannerCount++;
					}
					
					addContentView(bannerContainer, new ViewGroup.LayoutParams(
							ViewGroup.LayoutParams.WRAP_CONTENT,
							ViewGroup.LayoutParams.WRAP_CONTENT));

					// 构建广告，设置参数
					final BannerView ad = new BannerView(mContext, ADSize.BANNER, APP_ID, posId);
					ad.setRefresh(30);
					ad.setShowClose(false);
					
					ad.setADListener(new AbstractBannerADListener()
					{
					      @Override
					      public void onNoAD(int arg0)
					      {
					        Log.i("AD_DEMO", "BannerNoAD，eCode=" + arg0);
					        
					        bannerContainer.removeAllViews();
					        ad.destroy();
					        
					        bannerCount--;
					        banners[bannerCount] = null;
					      }

					      @Override
					      public void onADReceiv()
					      {
					        Log.i("AD_DEMO", "ONBannerReceive");
					      }
					    });

					RelativeLayout.LayoutParams mLayoutParams = new RelativeLayout.LayoutParams(
					LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
					mLayoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
					mLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
					bannerContainer.addView(ad, mLayoutParams);

					// 展示广告
					ad.loadAD();
					
					banner.Container = bannerContainer;
					banner.AD = ad;
					banner.PosId = posId;
				}
			});
		}
	}
	public void CloseBanner(String posId)
	{
		for (int i = 0; i < bannerCount; i++)
		{
			if (banners[i] != null && banners[i].PosId == posId)
			{
				CloseBanner(banners[i]);
				int end = banners.length - 1;
				for (int j = i; j < end; j++)
				{
					banners[j] = banners[j + 1];
				}
				banners[end] = null;
				break;
			}
		}
	}
	// 清除关闭广告
	private void CloseBanner(Banner banner)
	{
		banner.Container.removeAllViews();
		banner.AD.destroy();
	}
}

4. 将[java项目输出的.jar包]、[java引用的广告或其它SDK的.jar包]和[Manifest.xml]放入Unity项目Assets\Plugins\Android\里，Manifest案例如下
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.testandroid"
    android:versionCode="1"
    android:versionName="1.0" >

    <uses-sdk
        android:minSdkVersion="8"
        android:targetSdkVersion="21" />

	<!-- 使用Unity默认的ICON android:icon="@drawable/app_icon" -->
    <application
        android:allowBackup="true"
        android:icon="@drawable/app_icon"
        android:label="@string/app_name" >
        <activity
            android:name=".MainActivity"
            android:label="@string/app_name"
			android:screenOrientation="landscape" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

			<!-- 浏览器唤起APP配置 -->
			<intent-filter>
		        <action android:name="android.intent.action.VIEW"/>
		        <category android:name="android.intent.category.DEFAULT"/>
		        <category android:name="android.intent.category.BROWSABLE"/>
				<!-- 如下配置可在浏览器执行js代码 location.href='protocol://yoururl/action?param=value' 唤起app -->
		        <data android:scheme="protocol"/>
    		</intent-filter>

			<!-- Unity -->
            <meta-data android:name="unityplayer.ForwardNativeEventsToDalvik" android:value="true" />
        </activity>
        
		<!-- Unity Activity: orientation屏幕方向不对可能会造成闪退 -->
		<!-- 横屏显示 android:screenOrientation="landscape" -->
        <activity
            android:name="com.unity3d.player.UnityPlayerActivity"
			android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
        </activity>
    </application>

</manifest>


5. 在合适的地方构建以下广告实例调用广告
public class AD
{
    protected AndroidJavaObject java { get; private set; }

    public void Initialize(string APP_ID, string APP_KEY)
    {
        AndroidJavaClass javaClass = new AndroidJavaClass("com.unity3d.player.UnityPlayer");
        java = javaClass.GetStatic<AndroidJavaObject>("currentActivity");
        java.Set<string>("APP_ID", APP_ID);
        java.Set<string>("APP_KEY", APP_KEY);
    }
    public bool GetBannerState(string posId)
    {
        return java.Call<bool>("GetBannerState", posId);
    }
    public void ShowBanner(string posId)
    {
        java.Call("ShowBanner", posId);
    }
    public void CloseBanner(string posId)
    {
        java.Call("CloseBanner", posId);
    }
}

P.S.
1. Unity5.x java里的Boolean类型不可用，获取不到值且直接不抛异常打断程序运行
2. Android APK的调试可以下载Android Studio


Release版本导出
1. Unity创建user.keystore: Publishing Settings -> Create New keystore -> 选择路径 -> 密码 -> Alias -> Create a new key
2. Unity导出Andriod项目: 勾上Google Android Project
3. Eclipse准备导出:
	(1). Manifest.xml删除android:debuggable="false"
	(2). 右键项目 -> BuildPath -> Order and Export -> Android Private Libraries去掉打钩
4. 发布: 右键项目 -> Android Tools -> Export Signed Application Package -> 选择Unity导出的user.keystore -> 输入密码 -> 导出
导出的APK不能运行

Release APK导出
1. 同上创建keystore
2. Publishing Settings -> Use Existing Keystore -> 选择路径 -> 输入密码 -> 选择Alias -> 输入密码 -> 导出

APK反编译，需要工具apktool.jar
1. 安装java环境
2. 命令行执行反编译命令
java -jar apktool_2.4.0.jar d 反编译目标.apk
会生成反编译的apk内容
3. 根据ILSpy找到的要修改的地方 -> 打开ildasm -> 拖入要修改的dll -> 文件>>存储得到il文件 -> 修改il文件
4. 重新编译il回dll
C:\Windows\Microsoft.NET\Framework\v2.0.50727\ilasm 编译目标.il /output=编译目标.dll /dll
或exe
C:\Windows\Microsoft.NET\Framework\v2.0.50727\ilasm 编译目标.il /output=编译目标.exe /exe
5. 将修改好的dll覆盖到第二步反编译出来的内容里
6. java -jar apktool_2.4.0.jar b 反编译目录 -o 重编译目标.apk
7. 重新签名apk
错误1：无法打开jar文件 xxx.apk
解决1：修改AndroidManifest.xml里的compileSdkVersionCodename和platformBuildVersionName降低版本
"C:\Program Files\Java\jdk1.8.0_111\bin\jarsigner" -signedjar signed.apk -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore alias.keystore -storepass yamiwamiyu0 -keypass yamiwamiyu0 rebuild.apk alias

读取APK版本号，包名等信息，需要sdk里的工具build-tools\android-4.4W\aapt.exe，仅需此一个文件
执行批处理命令：aapt.exe dump badging 目标APP.apk
程序执行：_CMDLINE.RunExe





APK动态写入内容
1. APK的压缩方式是ZIP
2. C#使用Ionic.Zip.ZipFile库修改APK的Comment，Save成新的APK
3. JAVA通过以下代码可以读取到APK的Comment信息，APK安装后会复制到/data/app/包名-随即名/base.apk，不需要担心原apk被删掉

// Context.getPackageCodePath() = /data/app/包名-随即名/base.apk
extractZipComment(Context.getPackageCodePath());

public static String extractZipComment (String filename) {
	String retStr = null;
	try {
		File file = new File(filename);
		int fileLen = (int)file.length();
	
		FileInputStream in = new FileInputStream(file);

		byte[] buffer = new byte[Math.min(fileLen, 8192)];
		int len;
	
		in.skip(fileLen - buffer.length);
	
		if ((len = in.read(buffer)) > 0) {
			retStr = getZipCommentFromBuffer (buffer, len);
		}

		in.close();
	} catch (Exception e) {
		e.printStackTrace();
	}
	return retStr;
}

private static String getZipCommentFromBuffer (byte[] buffer, int len) {
	byte[] magicDirEnd = {0x50, 0x4b, 0x05, 0x06};
	int buffLen = Math.min(buffer.length, len);
	for (int i = buffLen-magicDirEnd.length-22; i >= 0; i--) {
		boolean isMagicStart = true;
		for (int k=0; k < magicDirEnd.length; k++) {
			if (buffer[i+k] != magicDirEnd[k]) {
			isMagicStart = false;
			break;
			}
		}
		if (isMagicStart) {
			int commentLen = buffer[i+20] + buffer[i+22]*256;
			int realLen = buffLen - i - 22;
			String comment = new String (buffer, i+22, Math.min(commentLen, realLen));
			return comment;
		}
	}
	return null;
}


JAVA代码获取安卓Android ID：
Settings.System.getString(Context.getContentResolver(), Settings.Secure.ANDROID_ID)

修改夜神模拟器Android ID
1. 命令行到夜神模拟器所在目录，可以右键夜神模拟器快捷方式，打开文件所在位置，这里有nox_adb.exe
2. 直接输入adb命令即可
  2.1. 查看Android ID: adb shell content query --uri content://settings/secure --where "name=\'android_id\'"
  2.2. 修改Android ID: adb shell content update --uri content://settings/secure --bind value:s:新AndroidID --where "name=\'android_id\'"

关掉Unity的闪频动画：将以下代码粘贴到Unity工程中能读取到的任意代码位置即可
#if !UNITY_EDITOR && UNITY_ANDROID
/// <summary>Unity个人版跳过Unity3D闪屏动画
/// <para>RuntimeInitializeOnLoadMethod可以在闪频前执行</para>
/// <para>UnityEngine.Rendering.SplashScreen.Stop(UnityEngine.Rendering.SplashScreen.StopBehavior.StopImmediate);可以直接关掉闪频</para>
/// <para>UnityEngine.Rendering.SplashScreen内部调用的是CancelSplashScreen</para>
/// <para>若UnityRuntime.bytes用的加密版本，那么这段代码应该放到Unity工程的Main.cs中</para>
/// </summary>
[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSplashScreen)]
public static void Init()
{
    AndroidJavaClass javaClass = new AndroidJavaClass("com.unity3d.player.UnityPlayer");
    AndroidJavaObject java = javaClass.GetStatic<AndroidJavaObject>("currentActivity");
    AndroidJavaRunnable runnable = null;
    runnable = new AndroidJavaRunnable(() =>
    {
        if (!UnityEngine.Rendering.SplashScreen.isFinished)
        {
                    
            typeof(UnityEngine.Rendering.SplashScreen).GetMethod("CancelSplashScreen",
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static).Invoke(null, new object[0]);
            java.Call("runOnUiThread", runnable);
        }
    });
    java.Call("runOnUiThread", runnable);
}
#endif